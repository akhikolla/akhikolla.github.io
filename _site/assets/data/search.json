[ { "title": "Prototyping test harness", "url": "/posts/Prototyping-testharness/", "categories": "Proposal", "tags": "Prototyping, ValgrindTest", "date": "2020-09-23 00:00:00 -0700", "snippet": "As a part of (R consortium fuzz testing proposal)[https://docs.google.com/document/d/15z2diPTJ3MTLe3H9WfHNAdzkn1bYIsLJ6_tpGWRqQBU/edit], we are creating a simple prototype on how to extract the valid inputs for a function from the RcppTestPackage and test it with Valgrind. We also test the test h..." }, { "title": "Rcpp Packages Limited Fuzz Testing", "url": "/posts/Rcpp-Packages-Limited-FuzzTesting/", "categories": "Testing, Memory checks", "tags": "FuzzTesting, R", "date": "2020-08-30 00:00:00 -0700", "snippet": "BackgroundTesting a software application is always a tough job and time-consuming. To successfully identify bugs in your package we need to consider the following: Randomized Inputs. Code Coverage Learned InputsWe should be able to pass both valid and invalid inputs to test the package. The in..." }, { "title": "Testing Rcpp packages", "url": "/posts/Testing-Rcpp-Packages/", "categories": "Testing, Memory checks", "tags": "Testings, R", "date": "2020-06-24 00:00:00 -0700", "snippet": "Testing Rcpp packages using DeepState and ValgrindTesting Rcpp packages for memory violations can be tricky.The C++ code embedded inside an Rcpp function can introduce subtle bugs. These bugs can be hard to detect because they don’t throw any warnings or error messages when we compile and run the..." }, { "title": "Automating the TestHarness", "url": "/posts/Automating-Test-Harness/", "categories": "RcppDeepState, Automate Test Harness", "tags": "TestHarness, R", "date": "2020-04-17 00:00:00 -0700", "snippet": "RcppDeepState testharness for binsegRcpp package using RInisdeIn this blog, I’ll be explaining the process of automating the testharness and integrating Rcpp with deepstate. This blog is a continuation of my previous blog explaining the idea of working with deepstate in R.If you want to know more..." }, { "title": "RcppDeepState", "url": "/posts/RcppDeepState-Introduction/", "categories": "Introduction, Way to Fuzz Test packages", "tags": "RcppDeepState, R", "date": "2020-02-27 00:00:00 -0700", "snippet": "This Blog gives you an understanding of Fuzzing, why it is important and what are the things that you should have prior knowledge about, before starting on DeepState and it’s usage on Rcpp packages. DeepState helps you use both Fuzzers and Symbolic executors to generate random inputs in the backe..." } ]
